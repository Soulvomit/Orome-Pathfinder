     1                                  ;Author:	Jonas Brown
     2                                  ;Date:		27/12-2016
     3                                  ;File: 		Node.asm
     4                                  
     5                                  [BITS 64]
     6                                  [SECTION .text]
     7                                  [GLOBAL _Node.Ctor]
     8                                  [GLOBAL _Node.Traceback]
     9                                  [GLOBAL _Node.CheckAdjecentNodes]
    10                                  [GLOBAL _Node.Empty]
    11                                  ;From _Node2D:
    12                                  [EXTERN _Node2D.CalcManhattanDistance]
    13                                  [EXTERN _Node2D.GetByCoordinates]
    14                                  ;From Data - Node
    15                                  [EXTERN Node.Position.Y]
    16                                  [EXTERN Node.Position.X]
    17                                  [EXTERN Node.Resistance]
    18                                  [EXTERN Node.Closed]
    19                                  [EXTERN Node.GCost]
    20                                  [EXTERN Node.HCost]
    21                                  [EXTERN Node.FCost]
    22                                  [EXTERN Node.ID]
    23                                  [EXTERN Node.PParent]
    24                                  [EXTERN Node.PNext]
    25                                  [EXTERN Node.Size]
    26                                  ;From Data - NodeStack
    27                                  [EXTERN NodeStack.Bottom]
    28                                  [EXTERN NodeStack.Count]
    29                                  ;From Data - NodeOpenList
    30                                  [EXTERN NodeOpenList.First]
    31                                  [EXTERN NodeOpenList.Count]
    32                                  ;From Data - AdjecentArray
    33                                  [EXTERN AdjecentArray.Count]
    34                                  [EXTERN AdjecentArray.Offsets]
    35                                  ;From Data - Grid
    36                                  [EXTERN Grid.MapWidth]
    37                                  [EXTERN Grid.MapHeight]
    38                                  [EXTERN Grid.OutBufferSize]
    39                                  [EXTERN Grid.Size]
    40                                  [DEFAULT REL]
    41                                   
    42                                  _Node:		
    43                                  	;IN: r13 = AdjecentOffsets, r14 = CurrentNode, r15 = TargetNode
    44                                  	;OUT: rcx = 0 = out-of-bounds, 1 = closed or non-traversable, 2 = updated, 
    45                                  	;			3 = sent to update but no update, 4 = initialized, 5 = target node found 
    46                                  	.CheckAdjecentNodes:
    47                                  		;ready adjecent check proc
    48 00000000 4D31DB                  		xor r11, r11								;clear r11
    49 00000003 49BD-                   		mov r13, AdjecentArray.Offsets				;store pointer to adjecent offsets array
    49 00000005 [0000000000000000] 
    50                                  		;check the current node's adjecent nodes
    51                                  		.next_adjecent:
    52                                  			;get next adjecent
    53 0000000D 4831C0                  			xor rax, rax							;clear rax
    54 00000010 4831DB                  			xor rbx, rbx							;clear rbx
    55 00000013 4831D2                  			xor rdx, rdx							;clear rdx
    56 00000016 66418B4500              			mov ax, word [r13]						;offset x
    57 0000001B 66418B5D02              			mov bx, word [r13 + 2]					;offset y
    58                                  			;x,y position for adjecent node
    59 00000020 66410386[00000000]      			add ax, word [r14 + Node.Position.X]	;arg 1 GetByCoordinates: add offset x to current node position
    60 00000028 6641039E[00000000]      			add bx, word [r14 + Node.Position.Y]	;arg 2 GetByCoordinates: add offset y to current node position
    61 00000030 668B95[00000000]        			mov dx, [rbp + Grid.MapWidth]			;arg 3 GetByCoordinates: map width
    62                                  			;if, adjecent node is out-of-bounds
    63 00000037 6639D0                  			cmp ax, dx								;compare x to map width
    64 0000003A 7D3A                    			jge .out_of_bounds						;if x above map width, out-of-bounds, end check
    65 0000003C 6683F800                			cmp ax, 0								;compare x to 0
    66 00000040 7C34                    			jl .out_of_bounds						;if x below 0, out-of-bounds, end check
    67 00000042 663B9D[00000000]        			cmp bx, word [rbp + Grid.MapHeight]		;compare y to map height
    68 00000049 7D2B                    			jge .out_of_bounds						;if y above map height, out-of-bounds, end check
    69 0000004B 6683FB00                			cmp bx, 0								;compare y to 0								
    70 0000004F 7C25                    			jl .out_of_bounds						;if y below zero, out-of-bounds, end check
    71                                  			;else, get current node adjecent
    72 00000051 E8(00000000)            			call _Node2D.GetByCoordinates			;call GetByCoordinates
    73                                  			;if it is closed and is non-traversable 
    74 00000056 6683B9[00000000]00      			cmp word [rcx + Node.Closed], 0			;compare adjecent.closed to 0
    75 0000005E 751D                    			jnz .closed_nontraversable				;if true, closed, end check
    76 00000060 6683B9[00000000]00      			cmp word [rcx + Node.Resistance], 0		;compare adjecent.resistance to 0
    77 00000068 7413                    			jz .closed_nontraversable				;if true, nontraversable, end check
    78                                  			;check if node should be updated or initialized
    79 0000006A 4883B9[00000000]FF      			cmp qword [rcx + Node.PParent], -1		;compare adjecent.parent to null
    80 00000072 742C                    			jz .initialize							;if true, initialize adjecent
    81 00000074 750E                    			jnz .try_update							;else if false, try to update adjecent
    82                                  			.out_of_bounds:
    83 00000076 B900000000              				mov rcx, 0							;set rcx, 0
    84 0000007B EB3E                    				jmp .check_done						;check done
    85                                  			.closed_nontraversable:
    86 0000007D B901000000              				mov rcx, 1							;set rcx, 1
    87 00000082 EB37                    				jmp .check_done						;check done
    88                                  			.try_update:
    89 00000084 4889C8                  				mov rax, rcx						;arg 1 fUpdate: adjecent node pointer
    90 00000087 E8CE000000              				call private.fUpdate				;call fUpdate
    91 0000008C 4883F900                				cmp rcx, 0							;compare ruturn value to 0
    92 00000090 7407                    				jz .update_failed					;if true, update failed
    93                                  				;jnz .update_succeded				;else if false, update succeded
    94                                  				;.update_succeded:
    95 00000092 B902000000              					mov rcx, 2						;set rcx, 2
    96 00000097 EB22                    					jmp .check_done					;adjecent check done
    97                                  				.update_failed:
    98 00000099 B903000000              					mov rcx, 3						;set rcx, 3
    99 0000009E EB1B                    					jmp .check_done					;adjecent check done
   100                                  			.initialize:
   101 000000A0 4889C8                  				mov rax, rcx						;arg 1 fInitialize: adjecent node pointer
   102 000000A3 E86A000000              				call private.fInitialize			;call fInitialize
   103 000000A8 4883F901                				cmp rcx, 1
   104 000000AC 7407                    				jz .target_found					;if true, target found
   105                                  				;jnz .initialized					;else if false, update succeded
   106                                  				;.initialized:
   107 000000AE B904000000              					mov rcx, 4						;set rcx, 4
   108 000000B3 EB06                    					jmp .check_done					;adjecent check done
   109                                  				.target_found:
   110 000000B5 B905000000              					mov rcx, 5						;set return value, 5
   111 000000BA C3                      					ret								;terminate loop and return
   112                                  			.check_done:
   113 000000BB 4983C504                				add r13, 4								;inc position in adjecent offsets array with word*2
   114 000000BF 49FFC3                  				inc r11									;inc iteration counter
   115 000000C2 66443B9D[00000000]      				cmp r11w, [rbp + AdjecentArray.Count]	;check for last offset
   116 000000CA 0F853DFFFFFF            				jnz .next_adjecent						;if not last offset, continue loop through adjecent nodes
   117 000000D0 C3                      				ret										;else, terminate loop and return
   118                                  	
   119                                  	;IN: rax = TargetNode, rbx = POutBuffer, rdx = DWord Index,  rsi = StartNode, rdi = Pop Counter
   120                                  	;OUT: rcx = path length
   121                                  	.Traceback:
   122                                  		;store node id on stack
   123 000000D1 FFB0[00000000]          		push qword [rax + Node.ID]				;push node id to stack
   124 000000D7 48FFC1                  		inc rcx									;inc path length
   125 000000DA 663B8D[00000000]        		cmp cx, word [rbp + Grid.OutBufferSize]	;if path length = buffer size
   126 000000E1 7412                    		jz .fill_next							;fill dword outbuffer with path IDs
   127 000000E3 4839B0[00000000]        		cmp qword [rax + Node.PParent], rsi		;if start node = parent
   128 000000EA 7409                    		jz .fill_next							;fill dword outbuffer with path IDs
   129                                  		;else, recursively traceback through parents
   130 000000EC 488B80[00000000]        		mov rax, [rax + Node.PParent]			;else, store parent in rax 
   131 000000F3 EBDC                    		jmp .Traceback							;continue traceback
   132                                  		.fill_next:
   133                                  			;pop the node id into outbuffer
   134 000000F5 4158                    			pop r8					;pop next in path
   135 000000F7 4C890413                			mov [rbx + rdx], r8		;store next in path in dword outbuffer
   136 000000FB 4883C204                			add rdx, 4				;add size of dword to rdx
   137 000000FF 48FFC7                  			inc rdi					;inc rdi = counter
   138 00000102 4839CF                  			cmp rdi, rcx			;if counter = path length
   139 00000105 7402                    			jz .fill_done			;job done!
   140 00000107 EBEC                    				jmp .fill_next		;else, continue to fill outbuffer
   141                                  			.fill_done:
   142 00000109 C3                      				ret					;return
   143                                  
   144                                  	;Uses rsi,rdi and rbp to access data segment. 
   145                                  	;Empties the node stack. NOTE: Must be called in the same "scope" as node construction
   146                                  	.Empty:
   147 0000010A 5D                      		pop rbp
   148 0000010B E83E010000              		call private.fStackDeallocAll
   149 00000110 55                      		push rbp
   150 00000111 C3                      		ret	
   151                                  		
   152                                  	;PRIVATE SUBROUTINES
   153                                  	private:				
   154                                  		;IN: rax = AdjecentNode, r15 = TargetNode, r14 = CurrentNode.
   155                                  		;OUT: rcx = 1 if rax is TargetNode, else 0.
   156                                  		.fInitialize:
   157 00000112 4C89B0[00000000]        			mov [rax + Node.PParent], r14			;set current as adjecents parent
   158 00000119 4C39F8                  			cmp rax, r15							;compare target to adjecent
   159 0000011C 7436                    			jz .target_found						;if true, target found
   160                                  			;jnz .initialize						;else, target not found, initialize node
   161                                  			;.initialize:							
   162 0000011E 498B9E[00000000]        				mov rbx, [r14 + Node.GCost]				;get parent g-cost
   163 00000125 660398[00000000]        				add bx, word [rax + Node.Resistance]	;add resistance and g-cost 
   164 0000012C 488998[00000000]        				mov [rax + Node.GCost], rbx				;set adjecent g-cost to g-cost + resistance
   165 00000133 E8(00000000)            				call _Node2D.CalcManhattanDistance		;calc manhatten distance to target, preserves rbx
   166 00000138 488988[00000000]        				mov [rax + Node.HCost], rcx				;set return value as adjecent h-cost
   167 0000013F 4801CB                  				add rbx, rcx							;add h-cost to resistance and g-cost 
   168 00000142 488998[00000000]        				mov [rax + Node.FCost], rbx				;store added values as adjecent f-cost
   169 00000149 E85A000000              				call .fOpen								;open adjecent
   170 0000014E B900000000              				mov rcx, 0								;set ret val
   171 00000153 C3                      				ret										;return
   172                                  			.target_found:
   173 00000154 B901000000              				mov rcx, 1								;set ret val
   174 00000159 C3                      				ret										;return
   175                                  						
   176                                  		;IN: rax = AdjecentNode, r14 = CurrentNode.
   177                                  		;OUT: rcx = 1 if node was updated, else 0.
   178                                  		.fUpdate:
   179                                  			;compute new g cost
   180 0000015A 4D8B86[00000000]        			mov r8, [r14 + Node.GCost]				;set new g-cost to current g-cost
   181 00000161 66440380[00000000]      			add r8w, word [rax + Node.Resistance]	;add adjecent resistance to to new g-cost
   182 00000169 4D89C1                  			mov r9, r8								;set new f-cost to new g-cost 
   183 0000016C 4C0388[00000000]        			add r9, [rax + Node.HCost]				;add adjecent h-cost to new f-cost
   184 00000173 4C3B88[00000000]        			cmp r9, [rax + Node.FCost]				;compare new f-cost	to adjecent f-cost
   185 0000017A 7F26                    			jg .no_update							;if, new f-cost is larger then current f cost, no update
   186 0000017C 7C09                    			jl .update								;else if, new f-costs are less, update 
   187                                  			;je .f_equal							;else, f-costs are equal
   188                                  			;.f_equal:								
   189 0000017E 4C3B80[00000000]        				cmp r8, [rax + Node.GCost]			;compare new g-cost	to old g-cost
   190 00000185 7D1B                    				jge .no_update						;if new g-cost is greather or equal, no update
   191                                  				;jl .update							;else, update
   192                                  			.update:
   193 00000187 4C89B0[00000000]        				mov [rax + Node.PParent], r14 		;update adjecent parent to current
   194 0000018E 4C8980[00000000]        				mov [rax + Node.GCost], r8			;update adjecent g-cost to new g-cost
   195 00000195 4C8988[00000000]        				mov [rax + Node.FCost], r9			;update adjecent f-cost to new f-cost
   196 0000019C B901000000              				mov rcx, 1							;update ret val
   197 000001A1 C3                      				ret									;return
   198                                  			.no_update:						
   199 000001A2 B900000000              				mov rcx, 0							;set ret val
   200 000001A7 C3                      				ret									;return
   201                                  		
   202                                  		;IN: rax = AdjecentNode.
   203                                  		;OUT: rcx = 0 if new node or new top node, 1 if new bottom node.
   204                                  		.fOpen:
   205 000001A8 4883BD[00000000]00      			cmp qword [rbp + NodeOpenList.Count], 0	;check if open list is empty
   206 000001B0 7E1E                    			jle .push_empty							;if it is, push empty
   207 000001B2 4C8B8D[00000000]        			mov r9, [rbp + NodeOpenList.First]		;save first in open list as next						
   208 000001B9 488B98[00000000]        			mov rbx, [rax + Node.FCost]				;save adjecents f-cost
   209 000001C0 493B99[00000000]        			cmp rbx, [r9 + Node.FCost]				;compare adjecent f-cost to next f-cost
   210 000001C7 7C15                    			jl .push_front							;if, adjecent f-cost less, front push
   211                                  			;jge .insert_stoted						;else if, adjecent f-cost greater or equal, insert sorted
   212                                  			;.insert_stoted:
   213 000001C9 E82B000000              				call .fSortedInsert					;call insert sorted
   214 000001CE EB21                    				jmp .open_done						;and end proc
   215                                  			.push_empty:							
   216 000001D0 488985[00000000]        				mov [rbp + NodeOpenList.First], rax	;set adjecent as first
   217 000001D7 B900000000              				mov rcx, 0							;set return val
   218 000001DC EB13                    				jmp .open_done						;and end proc
   219                                  			.push_front:
   220 000001DE 488985[00000000]        				mov [rbp + NodeOpenList.First], rax	;set adjecent as first
   221 000001E5 4C8988[00000000]        				mov [rax + Node.PNext], r9			;link next to adjecent		
   222 000001EC B901000000              				mov rcx, 1							;set return val
   223                                  				;jmp .open_done						;and end proc
   224                                  			.open_done:
   225 000001F1 48FF85[00000000]        				inc qword [rbp + NodeOpenList.Count];increase open list count	
   226 000001F8 C3                      				ret									;return
   227                                  			
   228                                  		;IN: rax = AdjecentNode.
   229                                  		;OUT: rcx = 3 if node was allocated based on f-cost, rcx = 4 if node was allocated based on h-cost.
   230                                  		.fSortedInsert:
   231                                  			;mov r9, [rbp + NodeOpenList.First]	;save first in open list as next
   232                                  			;mov rbx, [rax + Node.FCost]		;save adjecents f-cost
   233 000001F9 488B90[00000000]        			mov rdx, [rax + Node.HCost]			;save adjecents h-cost
   234                                  			.next_open:
   235 00000200 4D89C8                  				mov r8, r9						;set current as next 
   236 00000203 4D8B88[00000000]        				mov r9, [r8 + Node.PNext]		;set next as current.next 
   237 0000020A 4983F9FF                				cmp qword r9, -1				;compare next node to null
   238 0000020E 7416                    				jz .push_back					;if null, next is last 
   239 00000210 493B99[00000000]        				cmp rbx, [r9 + Node.FCost]		;compare adjecent f-cost to current f-cost
   240 00000217 7FE7                    				jg .next_open					;if adjecent f-cost is more expensive, get next open
   241 00000219 7C18                    				jl .insert_f					;if adjecent f-cost is cheaper, insert
   242                                  				;je .equal_f					;else, f-cost equal 
   243                                  				;.equal_f:
   244 0000021B 493B91[00000000]        					cmp rdx, [r9 + Node.HCost]	;compare adjecent h-cost to current h-cost
   245 00000222 7FDC                    					jg .next_open				;if adjecent h-cost is more expensive, get next open
   246 00000224 7E14                    					jle .insert_hf				;if adjecent h-cost is cheaper AND f-costs are equal, insert
   247                                  				.push_back:
   248 00000226 498980[00000000]        					mov [r8 + Node.PNext], rax	;link adjecent to current
   249 0000022D B902000000              					mov rcx, 2					;set return val
   250 00000232 C3                      					ret							;return
   251                                  				.insert_f:
   252 00000233 B903000000              					mov rcx, 3					;set return val
   253 00000238 EB05                    					jmp .insert					;insert
   254                                  				.insert_hf:
   255 0000023A B904000000              					mov rcx, 4 					;set return val
   256                                  					;jmp .insert				;insert
   257                                  				.insert:
   258 0000023F 498980[00000000]        					mov [r8 + Node.PNext], rax	;link adjecent to current 
   259 00000246 4C8988[00000000]        					mov [rax + Node.PNext], r9	;link next to adjecent
   260 0000024D C3                      					ret							;return
   261                                  			
   262                                  		;deallocates all nodes
   263                                  		.fStackDeallocAll:
   264 0000024E 5F                      			pop rdi
   265                                  			;remove all nodes
   266 0000024F 48BE-                   			mov rsi, Node.Size
   266 00000251 [0000000000000000] 
   267 00000259 490FAFB1[00000000]      			imul rsi, [r9 + NodeStack.Count]
   268 00000261 4801F4                  			add rsp, rsi
   269 00000264 4881C4[00000000]        			add rsp, Grid.Size
   270                                  			;null node counter
   271 0000026B 49C781[00000000]00-     			mov qword [r9 + NodeStack.Count], 0
   271 00000273 000000             
   272 00000276 57                      			push rdi
   273 00000277 C3                      			ret
