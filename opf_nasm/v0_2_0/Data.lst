     1                                  [BITS 64]
     2                                  [SECTION .data]
     3                                  ;Node
     4                                  [GLOBAL Node.Position.Y]
     5                                  [GLOBAL Node.Position.X]
     6                                  [GLOBAL Node.Resistance]
     7                                  [GLOBAL Node.Traversable]
     8                                  [GLOBAL Node.Closed]
     9                                  [GLOBAL Node.GCost]
    10                                  [GLOBAL Node.HCost]
    11                                  [GLOBAL Node.FCost]
    12                                  [GLOBAL Node.ID]
    13                                  [GLOBAL Node.PParent]
    14                                  [GLOBAL Node.PNext]
    15                                  [GLOBAL Node.Size]
    16                                  [GLOBAL Node.BaseCost]
    17                                  [GLOBAL Node.AdjecentOffsets]
    18                                  ;NodeStack
    19                                  [GLOBAL NodeStack.Top]
    20                                  [GLOBAL NodeStack.Bottom]
    21                                  [GLOBAL NodeStack.Count]
    22                                  ;NodeOpenList
    23                                  [GLOBAL NodeOpenList.First]
    24                                  [GLOBAL NodeOpenList.Last]
    25                                  [GLOBAL NodeOpenList.Count]
    26                                  ;Grid
    27                                  [GLOBAL Grid.StartX]
    28                                  [GLOBAL Grid.StartY]
    29                                  [GLOBAL Grid.PStartNode]
    30                                  [GLOBAL Grid.TargetX]
    31                                  [GLOBAL Grid.TargetY]
    32                                  [GLOBAL Grid.PMap]
    33                                  [GLOBAL Grid.MapWidth]
    34                                  [GLOBAL Grid.MapHeight]
    35                                  [GLOBAL Grid.POutBuffer]
    36                                  [GLOBAL Grid.OutBufferSize]
    37                                  ;TEST
    38                                  [GLOBAL TestData.PMap]
    39                                  [GLOBAL TestData.POutBuffer]
    40                                  [DEFAULT REL]
    41                                  ALIGN 8
    42                                  
    43                                  ;per node data accessors:
    44                                  Node:
    45                                  	;.ShadowBytes2	equ		62		;8*7+6	= 62
    46                                  	;.ShadowBytes1	equ		60		;8*7+4	= 60
    47                                  	;.ShadowBytes	equ		58		;8*7+2	= 58
    48                                  	;imm const: offsets accessors for supplied data:
    49                                  	.Position.Y:	equ 	56		;8*7 	= 56
    50                                  	.Position.X:	equ 	54		;8*6+6 	= 54
    51                                  	;imm const: offsets accessors:
    52                                  	.Resistance:	equ		52		;8*6+4 	= 52
    53                                  	.Traversable:	equ		50		;8*6+2 	= 50
    54                                  	.Closed:		equ		48		;8*6 	= 48
    55                                  	.GCost:			equ		40		;8*5 	= 40
    56                                  	.HCost:			equ		32		;8*4 	= 32
    57                                  	.FCost:			equ 	24		;8*3 	= 24
    58                                  	.ID: 			equ 	16		;8*2 	= 16
    59                                  	.PParent:		equ 	8		;8*1 	= 8
    60                                  	.PNext			equ		0		;8*0 	= 0
    61                                  	;imm const: size of a node:
    62                                  	.Size:			equ 	58		;8*7+2	= 58
    63                                  	;.Size:			equ 	64		;8*6 	= 64
    64                                  	;const static data: base cost of traversing a node:
    65 00000000 0100000000000000        	.BaseCost: 			dq		1
    66 00000008 010000000000000000-     	.AdjecentOffsets:	dq 		1,0, -1,0, 0,1, 0,-1, 1,1, 1,-1, -1,1, -1,-1
    66 00000011 00000000000000FFFF-
    66 0000001A FFFFFFFFFFFF000000-
    66 00000023 000000000000000000-
    66 0000002C 000000000100000000-
    66 00000035 000000000000000000-
    66 0000003E 0000FFFFFFFFFFFFFF-
    66 00000047 FF0100000000000000-
    66 00000050 010000000000000001-
    66 00000059 00000000000000FFFF-
    66 00000062 FFFFFFFFFFFFFFFFFF-
    66 0000006B FFFFFFFFFF01000000-
    66 00000074 00000000FFFFFFFFFF-
    66 0000007D FFFFFFFFFFFFFFFFFF-
    66 00000086 FFFF               
    67                                  
    68                                  ;per execution unit data accessors:	
    69                                  ;Stack alignment need - add 2 shadow bytes			
    70                                  NodeStack:
    71                                  	;imm const: the topmost node on stack
    72                                  	.Top:			equ		0 	;8*0 	= 0
    73                                  	;imm const: bottom node on stack
    74                                  	.Bottom:		equ		8	;8*1 	= 8
    75                                  	;imm const: number of nodes on the stack
    76                                  	.Count:			equ		16	;8*2 	= 16
    77                                  
    78                                  NodeOpenList:
    79                                  	;imm const: the fist node in open list
    80                                  	.First:			equ		24	;8*3 	= 24
    81                                  	;imm const: the last node in open list
    82                                  	.Last:			equ		32	;8*4 	= 32
    83                                  	;imm const: number of nodes in open list
    84                                  	.Count:			equ		40	;8*5 	= 40
    85                                  
    86                                  Grid:
    87                                  	.ShadowBytes	equ		48	;8*6	= 48
    88                                  	.StartX:		equ 	50	;8*6+2	= 50
    89                                  	.StartY:		equ 	52	;8*6+4	= 52
    90                                  	.TargetX:		equ 	54	;8*6+6	= 54
    91                                  	.TargetY:		equ 	56	;8*7	= 56
    92                                  	.MapWidth:		equ		58	;8*7+2	= 58
    93                                  	.MapHeight:		equ 	60	;8*7+4	= 60
    94                                  	.OutBufferSize: equ 	62	;8*7+6	= 62	
    95                                  	.POutBuffer: 	equ 	64	;8*8	= 64
    96                                  	.PMap			equ 	72	;8*9	= 72
    97                                  	.PStartNode:	equ 	80	;8*10	= 80
    98                                  ;TLS.Size:			equ 	88	;8*11 	= 88
    99                                  
   100                                  ;FOR TESTING
   101                                  ;TestData:
   102                                  ;	.StartX:		dq 0		
   103                                  ;	.StartY:		dq 0
   104                                  ;	.PStartNode:	dq 0
   105                                  ;	.TargetX:		dq 1
   106                                  ;	.TargetY:		dq 2
   107                                  ;	.PMap:			dq Map
   108                                  ;	.MapWidth:		dq 4
   109                                  ;	.MapHeight:		dq 3
   110                                  ;	.POutBuffer: 	dq OutBuffer
   111                                  ;	.OutBufferSize: dq 12
   112                                  
   113                                  ;.PMap:			db 1, 1, 1, 1, 
   114                                  ;				db 0, 1, 0, 1,
   115                                  ;				db 0, 1, 1, 1
   116                                  				
   117                                  ;.POutBuffer:	dd 0, 0, 0, 0, 
   118                                  ;				dd 0, 0, 0, 0,
   119                                  ;				dd 0, 0, 0, 0
   120                                  
   121                                  ;Grid:
   122                                  ;	.StartX:		dq 0		
   123                                  ;	.StartY:		dq 0
   124                                  ;	.PStartNode:	dq 0
   125                                  ;	.TargetX:		dq 31
   126                                  ;	.TargetY:		dq 31
   127                                  ;	.PMap:			dq Map
   128                                  ;	.MapWidth:		dq 32
   129                                  ;	.MapHeight:		dq 32
   130                                  ;	.POutBuffer: 	dq OutBuffer
   131                                  ;	.OutBufferSize: dq 1024
   132                                  
   133                                  ;.PMap:	db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   134                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   135                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   136                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   137                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   138                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   139                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   140                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   141                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   142                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   143                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   144                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   145                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   146                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   147                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   148                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   149                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   150                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   151                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   152                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   153                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   154                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   155                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   156                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   157                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   158                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   159                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   160                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   161                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   162                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   163                                  ;		db 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 
   164                                  ;		db 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
   165                                  
   166                                  ;.POutBuffer:		
   167                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   168                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   169                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   170                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   171                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   172                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   173                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   174                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   175                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   176                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   177                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   178                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   179                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   180                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   181                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   182                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   183                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   184                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   185                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   186                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   187                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   188                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   189                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   190                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   191                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   192                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   193                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   194                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   195                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   196                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   197                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   198                                  ;		dd 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
