     1                                  ;Author:	Jonas Brown
     2                                  ;Date:		27/12-2016
     3                                  ;File: 		FindPath.asm
     4                                  
     5                                  [BITS 64]
     6                                  [SECTION .text]
     7                                  [GLOBAL DllMain]
     8                                  [GLOBAL FindPath]
     9                                  [EXPORT DllMain]
    10                                  [EXPORT FindPath]
    11                                  ;From _Node:
    12                                  [EXTERN _Node.CheckAdjecentNodes]
    13                                  [EXTERN _Node.Empty]
    14                                  [EXTERN _Node.Traceback]
    15                                  ;From _Node2D:
    16                                  [EXTERN _Node2D.GetByCoordinates]
    17                                  ;From Data - Node
    18                                  [EXTERN Node.Resistance]
    19                                  [EXTERN Node.Closed]
    20                                  [EXTERN Node.PNext]
    21                                  [EXTERN Node.Size]
    22                                  ;From Data - NodeStack
    23                                  [EXTERN NodeStack.Top]
    24                                  [EXTERN NodeStack.Bottom]
    25                                  [EXTERN NodeStack.Count]
    26                                  ;From Data - NodeOpenList
    27                                  [EXTERN NodeOpenList.First]
    28                                  [EXTERN NodeOpenList.Count]
    29                                  ;From Data - Grid
    30                                  [EXTERN Grid.TargetX]
    31                                  [EXTERN Grid.TargetY]
    32                                  [EXTERN Grid.StartX]
    33                                  [EXTERN Grid.StartY]
    34                                  [EXTERN Grid.PStartNode]
    35                                  [EXTERN Grid.MapWidth]
    36                                  [EXTERN Grid.MapHeight]
    37                                  [EXTERN Grid.POutBuffer]
    38                                  [EXTERN Grid.PMap]
    39                                  [DEFAULT REL]
    40                                  
    41                                  ;windows dll entry
    42                                  DllMain:
    43 00000000 B801000000                  mov eax, 1
    44 00000005 C3                          ret
    45                                  
    46                                  ;INTERFACE: fastcall64
    47                                  ;typedef int(*ASM_INTERFACE)(const int nStartX, const int nStartY, const int nTargetX, const int nTargetY, 
    48                                  ;const unsigned char* pMap, const int nMapWidth, const int nMapHeight, int* pOutBuffer, const int nOutBufferSize) 
    49                                  FindPath:
    50                                  
    51                                  	;check if start x coord is out-of-bounds
    52 00000006 3B4C2430                	cmp ecx, [rsp + 48]
    53 0000000A 0F8D04020000            	jge .no_path_found
    54 00000010 83F900                  	cmp ecx, 0
    55 00000013 0F8CFB010000            	jl .no_path_found
    56                                  	;check if start y coord is out-of-bounds
    57 00000019 3B542438                	cmp edx, [rsp + 56]
    58 0000001D 0F8DF1010000            	jge .no_path_found
    59 00000023 83FA00                  	cmp edx, 0
    60 00000026 0F8CE8010000            	jl .no_path_found
    61                                  	;check if target x coord is out-of-bounds
    62 0000002C 443B442430              	cmp r8d, [rsp + 48]
    63 00000031 0F8DDD010000            	jge .no_path_found
    64 00000037 4183F800                	cmp r8d, 0
    65 0000003B 0F8CD3010000            	jl .no_path_found
    66                                  	;check if target y coord is out-of-bounds
    67 00000041 443B4C2438              	cmp r9d, [rsp + 56]
    68 00000046 0F8DC8010000            	jge .no_path_found
    69 0000004C 4183F900                	cmp r9d, 0
    70 00000050 0F8CBE010000            	jl .no_path_found
    71                                  	
    72                                  	;initialize "per execution" tls data
    73 00000056 4889E5                  	mov rbp, rsp			;save the stack ptr
    74 00000059 6A00                    	push qword 0			;push Grid.PStartNode@80 as qword
    75 0000005B 488B4528                	mov rax, [rbp + 40]		;intercept arg Grid.PMap@72
    76 0000005F 50                      	push rax				;push arg as qword				
    77 00000060 488B4540                	mov rax, [rbp + 64]		;intercept arg Grid.POutBuffer@64
    78 00000064 50                      	push rax				;push arg as qword
    79 00000065 488B4548                	mov rax, [rbp + 72]		;intercept arg Grid.OutBufferSize@62
    80 00000069 6650                    	push ax					;push arg as word
    81 0000006B 488B4538                	mov rax, [rbp + 56]		;intercept arg Grid.MapHeight@60
    82 0000006F 6650                    	push ax					;push arg as word
    83 00000071 488B4530                	mov rax, [rbp + 48]		;intercept arg Grid.MapWidth@58
    84 00000075 6650                    	push ax					;push arg as word
    85 00000077 664151                  	push r9w				;intercept arg Grid.TargetY@56
    86 0000007A 664150                  	push r8w				;intercept arg Grid.TargetX@54
    87 0000007D 6652                    	push dx					;intercept arg Grid.StartY@52
    88 0000007F 6651                    	push cx					;intercept arg Grid.StartX@50
    89 00000081 488B4550                	mov rax, [rbp + 80]		;intercept arg Grid.IncludeDiagonals@48
    90 00000085 4883F801                	cmp rax, 1				;if IncludeDiagonals == false
    91 00000089 7506                    	jnz .ignore_diagonals	;jump to ignore digonals
    92 0000008B 66B80800                	mov ax, 8				;else, include diagonals, mov ax, 8
    93 0000008F EB04                    	jmp .include_diagonals	;jump over ignore diagonals
    94                                  	.ignore_diagonals:		
    95 00000091 66B80400                	mov ax, 4				;mov ax, 4 
    96                                  	.include_diagonals:
    97 00000095 6650                    	push word ax			;Grid.IncludeDiagonals@48
    98 00000097 6A01                    	push qword 1			;NodeOpenList.Count@40
    99 00000099 6A00                    	push qword 0			;NodeOpenList.Last@32
   100 0000009B 6A00                    	push qword 0			;NodeOpenList.First@24
   101 0000009D 6A00                    	push qword 0			;NodeStack.Count@16
   102 0000009F 6A00                    	push qword 0			;NodeStack.Bottom@8
   103 000000A1 6A00                    	push qword 0			;NodeStack.Top@0
   104 000000A3 4889E5                  	mov rbp, rsp			;save the stack ptr to the thread local storage
   105                                  	
   106                                  	;initialize values for node construction
   107 000000A6 4889A5[00000000]        	mov [rbp + NodeStack.Bottom], rsp   			;set bottom node to stack pointer
   108 000000AD 4881AD[00000000]-       	sub qword [rbp + NodeStack.Bottom], Node.Size	;add size bottom node
   108 000000B4 [00000000]         
   109 000000B8 6631C9                  	xor cx, cx										;clear resistance word, cx
   110 000000BB 4D31C0                  	xor r8, r8				 	  					;clear row counter
   111 000000BE 4D31C9                  	xor r9, r9				  						;clear col counter
   112 000000C1 4D31D2                  	xor r10, r10 				  					;clear node counter
   113 000000C4 4C8B9D[00000000]        	mov r11, [rbp + Grid.PMap]			  			;ptr to map buffer
   114 000000CB 4C8BA5[00000000]        	mov r12, [rbp + Grid.MapWidth]					;store MapWidth into r12	
   115 000000D2 4C8BAD[00000000]        	mov r13, [rbp + Grid.MapHeight]					;store MapHieght into r13
   116 000000D9 4981E4FFFF0000          	and r12, 0xFFFF									;clear the highest 12 bytes of r12
   117 000000E0 4981E5FFFF0000          	and r13, 0xFFFF									;clear the highest 12 bytes of r13
   118 000000E7 4D0FAFE5                	imul r12, r13									;multiply r12 with MapHeight
   119                                  	;construct nodes on stack from PMap
   120                                  	.alloc:									;entry point of stack alloction loop
   121 000000EB 4D39E2                  		cmp r10, r12						;check for last node in map 
   122 000000EE 7435                    		jz .find_path						;if last node, terminate alloc loop
   123 000000F0 66443B8D[00000000]      			cmp r9w, [rbp + Grid.MapWidth]	;check for last node in row
   124 000000F8 7423                    			jz .switch_row					;if last node in row, row switch
   125                                  			;construct node
   126 000000FA 664150                  			push r8w						;Node.Position.Y: 	offset = 8*6+6	= 56
   127 000000FD 664151                  			push r9w						;Node.Position.X: 	offset = 8*6+4 	= 54
   128 00000100 438A0C13                			mov cl, byte [r11+r10]			;store resistance as byte
   129 00000104 6651                    			push cx 						;Node.Resistance: 	offset = 8*6+2 	= 52
   130 00000106 666A00                  			push word  0					;Node.Closed: 		offset = 8*6 	= 48
   131 00000109 6A00                    			push qword 0					;Node.GCost: 		offset = 8*5	= 40
   132 0000010B 6A00                    			push qword 0					;Node.HCost: 		offset = 8*4	= 32
   133 0000010D 6A00                    			push qword 0					;Node.FCost: 		offset = 8*3	= 24
   134 0000010F 4152                    			push qword r10					;Node.ID: 			offset = 8*2	= 16
   135 00000111 6AFF                    			push qword -1					;Node.PParent: 		offset = 8*1	= 8
   136 00000113 6AFF                    			push qword -1					;Node.PNext: 		offset = 8*0	= 0
   137 00000115 49FFC2                  			inc r10							;inc node counter
   138 00000118 49FFC1                  			inc r9							;inc row counter
   139 0000011B EBCE                    			jmp .alloc						;continue alloc loop
   140                                  			.switch_row:					;entry of row switch
   141 0000011D 49FFC0                  				inc r8						;inc col counter
   142 00000120 4D31C9                  				xor r9, r9					;reset row counter
   143 00000123 EBC6                    				jmp .alloc					;continue alloc loop
   144                                  	
   145                                  	.find_path:
   146                                  		;save node counter
   147 00000125 4C8995[00000000]        		mov qword [rbp + NodeStack.Count], r10
   148                                  		;save top ptr
   149 0000012C 4889A5[00000000]        		mov qword [rbp + NodeStack.Top], rsp
   150                                  		;store addr of target node in r15
   151 00000133 668B85[00000000]        		mov ax, [rbp + Grid.TargetX]			;store TargetX in ax
   152 0000013A 668B9D[00000000]        		mov bx, [rbp + Grid.TargetY]			;store TargetY in bx
   153 00000141 668B95[00000000]        		mov dx, [rbp + Grid.MapWidth]			;store MapWidth in dx
   154 00000148 4825FFFF0000            		and rax, 0xFFFF							;clear the highest 12 bytes of rax
   155 0000014E 4881E3FFFF0000          		and rbx, 0xFFFF							;clear the highest 12 bytes of rbx
   156 00000155 4881E2FFFF0000          		and rdx, 0xFFFF							;clear the highest 12 bytes of rdx
   157 0000015C E8(00000000)            		call _Node2D.GetByCoordinates			;call GetByCoord to get the target node
   158 00000161 6683B9[00000000]00      		cmp word [rcx + Node.Resistance], 0		;if target node is not traversable
   159 00000169 0F84AD000000            		jz .no_path_found_1						;no path can be found
   160 0000016F 4989CF                  		mov r15, rcx							;else, store the target node in r15
   161 00000172 668B85[00000000]        		mov ax, [rbp + Grid.StartX]				;store StartX in ax
   162 00000179 668B9D[00000000]        		mov bx, [rbp + Grid.StartY]				;store StartY in bx
   163 00000180 668B95[00000000]        		mov dx, [rbp + Grid.MapWidth]			;store MapWidth in dx
   164 00000187 E8(00000000)            		call _Node2D.GetByCoordinates			;call GetByCoord to get the start node
   165 0000018C 6683B9[00000000]00      		cmp word [rcx + Node.Resistance], 0		;if start node is not traversable
   166 00000194 0F848B000000            		jz .no_path_found_2						;no path can be found
   167 0000019A 48898D[00000000]        		mov qword [rbp + Grid.PStartNode], rcx			;save a ptr to start node
   168 000001A1 48898D[00000000]        		mov qword [rbp + NodeOpenList.First], rcx		;set first open to start node	
   169                                  		;find path sequence
   170                                  		.next_open:
   171                                  			;ready current node, store
   172 000001A8 4C8BB5[00000000]        			mov r14, [rbp + NodeOpenList.First]			;set current node to first open
   173                                  			;ready NodeOpenList.First node, pop
   174 000001AF 6641C786[00000000]-     			mov word [r14 + Node.Closed], 1				;close current node
   174 000001B7 0100               
   175 000001B9 4D8BA6[00000000]        			mov r12, [r14 + Node.PNext]					;get current.next
   176 000001C0 4C89A5[00000000]        			mov [rbp + NodeOpenList.First], r12			;set first open to current.next
   177 000001C7 49C786[00000000]FF-     			mov qword [r14 + Node.PNext], -1			;current - set PNext to null
   177 000001CF FFFFFF             
   178 000001D2 48FF8D[00000000]        			dec qword [rbp + NodeOpenList.Count]		;dec open list count
   179                                  			;check adjecent nodes
   180 000001D9 E8(00000000)            			call _Node.CheckAdjecentNodes			;call proc
   181 000001DE 4883F905                			cmp rcx, 5								;if target is found, return = 5
   182 000001E2 740C                    			jz .path_found							;jump to "path found" if it is
   183 000001E4 4883BD[00000000]00      			cmp qword [rbp + NodeOpenList.Count], 0	;check if open list is empty
   184 000001EC 7E40                    			jle .no_path_found_3					;if it is, no path found
   185 000001EE EBB8                    			jmp .next_open							;check next open node
   186                                  		
   187                                  	;pathing done
   188                                  	.path_found:
   189 000001F0 4C89F8                  		mov rax, r15								;store target node in rax
   190 000001F3 488B9D[00000000]        		mov rbx, [rbp + Grid.POutBuffer]			;store ptr to outbuffer in rbx
   191 000001FA 488BB5[00000000]        		mov rsi, [rbp + Grid.PStartNode]			;store ptr to start node in rsi
   192 00000201 4831C9                  		xor rcx, rcx								;ready rcx
   193 00000204 4831D2                  		xor rdx, rdx								;ready rdx
   194 00000207 4831FF                  		xor rdi, rdi								;ready rdi
   195 0000020A E8(00000000)            		call _Node.Traceback						;call _Node.Traceback to store the final path in outbuffer
   196 0000020F 4889C8                  		mov rax, rcx								;store ptr to outbuffer in rax
   197 00000212 EB23                    		jmp .pf_done								;jump to pf_done
   198                                  	.no_path_found:
   199 00000214 48C7C0FFFFFFFF          		mov rax, -1			;ret val: start or target is out-of-bounds of map
   200 0000021B C3                      		ret					;return
   201                                  	.no_path_found_1:
   202 0000021C 48C7C0FEFFFFFF          		mov rax, -2			;ret val: target node is non-traversable
   203 00000223 EB12                    		jmp .pf_done		;jump to pf_done
   204                                  	.no_path_found_2:
   205 00000225 48C7C0FDFFFFFF          		mov rax, -3			;ret val: start node is non-traversable
   206 0000022C EB09                    		jmp .pf_done		;jump to pf_done
   207                                  	.no_path_found_3:
   208 0000022E 48C7C0FCFFFFFF          		mov rax, -4			;ret val: open list is empty
   209 00000235 EB00                    		jmp .pf_done		;jump to pf_done
   210                                  	.pf_done:
   211 00000237 4989E9                  		mov r9, rbp			;save rbp in r9
   212 0000023A E8(00000000)            		call _Node.Empty	;empty nodes
   213 0000023F C3                      		ret					;return
